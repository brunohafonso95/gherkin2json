- annotation:
    logo:
    title: BasicCommandWeb (classe)
    text_description:
    - Classe responsável por por conter comandos que executam interações em páginas web.
    - Os métodos contidos na classe são todos públicos e para utiliza-los, não é necessário passar o WebDriver como parametro.
- annotation:
    title: BasicCommandWeb (construtor)
    text_description:
    - Método construtor da classe.
    parameters:
    - WebDriver: driver
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    return:
    - void: método não tem retorno.
- annotation:
    title: mudarAba
    text_description:
    - Método resposanvel por mudar a aba atual do navegador recebe um <code>**int**</code> como parâmetro, as abas são lidas em um array dessa forma, são zero indexadas, ou seja,
    - os números passados como parâmetros vão de 0 à quantidade de abas abertas no momento menos 1.
    parameters:
    - int: indiceAba
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.mudarAba(0);
    return:
    - void: método não tem retorno.
- annotation:
    title: trocarJanela
    text_description:
    - Método responsável trocar a janela ativa do navegador que recebe uma <code>**String**</code> como parâmetro,
    - as janelas são lidas em um array dessa forma, são zero indexadas, ou seja,
    - os números passados vão de 0 à quantidade de janelas abertas no momento menos 1.
    parameters:
    - String: seletorElemento
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.trocarJanela("elemento");
    return:
    - void: método não tem retorno.
- annotation:
    title: encontra
    text_description:
    - Método responsável por encontrar um elemento no navegador,
    - o método recebe uma <code>**String**</code> como parâmetro e busca o elementro através dos seguintes seletores
    - <code>**id**</code>, <code>**name**</code>, <code>**tagName**</code>, <code>**cssSelector**</code>, <code>**linkText**</code>,
    - <code>**partialLinkText**</code>, <code>**xpath**</code>.
    parameters:
    - String: seletorElemento
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.encontra("elemento");
    return:
    - WebElement: método retorna o elemento buscado, caso o mesmo exista na página.
- annotation:
    title: borda
    text_description:
    - Método responsável por localizar um elemento no navegador e destacar
    - o mesmo com um borda vermelha para exibir qual fluxo ou ação está sendo realizado,
    - recebe um <code>**WebElement**</code> como parâmetro.
    parameters:
    - WebElement: elemento
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: WebElement menuLink = comBasico.findElement(By.id("menu-link"));
    - java: comBasico.borda(menuLink);
    return:
    - void: método não tem retorno.
- annotation:
    title: elementoExiste
    text_description:
    - Método responsável por validar se um elemento existe no *DOM* (Document Object Model),
    - recebe uma <code>**String**</code>
    - como parâmetro que é o seletor do elemento.
    parameters:
    - String: seletorElemento
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.elementoExiste("menu-link");
    return:
    - void: método não tem retorno.
- annotation:
    title: elementoEstaHabilitado
    text_description:
    - Método responsável por validar se um elemento está habilitado,
    - recebe uma <code>**String**</code>
    - como parâmetro que é o seletor do elemento.
    parameters:
    - String: seletorElemento
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.elementoEstaHabilitado("menu-link");
    return:
    - void: método não tem retorno.
- annotation:
    title: escrever
    text_description:
    - Método responsável por escrever em elementos que permitam a entrada de dados,
    - recebe 2 parâmetrosdo tipo <code>**String**</code>
    parameters:
    - String: seletorElemento
    - String: texto
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.escrever("input-exemplo", "texto de exemplo");
    return:
    - void: método não tem retorno.
- annotation:
    title: limpar
    text_description:
    - Método responsável por limpar um elemnto que recebe entrada de dados,
    - recebe um parâmetro do tipo <code>**String**</code>
    parameters:
    - String: seletorElemento
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.limpar("input-exemplo");
    return:
    - void: método não tem retorno.
- annotation:
    title: clicar
    text_description:
    - Método responsável por clicar em um elemento,
    - recebe um parâmetro do tipo <code>**String**</code>
    parameters:
    - String: seletorElemento
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.clicar("exemplo");
    return:
    - void: método não tem retorno.
- annotation:
    title: clicarElementos
    text_description:
    - Método responsável por clicar em todos os elementos das lista de elementos passada
    - como parâmetro.
    parameters:
    - List <String>: seletorElementos
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: List String elementos = Arrays.asList("elemento1","elemento2");
    - java: comBasico.clicarElementos(elementos);
    return:
    - void: método não tem retorno.
- annotation:
    title: verificarSeRadioEstaMarcado
    text_description:
    - Método responsável por verificar se um elemento do tipo radio está selecionado
    - recebe uma <code>**String**</code> como parâmetro.
    parameters:
    - String: seletorElemento
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.verificarSeRadioEstaMarcado("elemento");
    return:
    - void: método não tem retorno.
- annotation:
    title: obterTexto
    text_description:
    - Método responsável por obter o texto de um elemento
    - recebe uma <code>**String**</code> como parâmetro.
    parameters:
    - String: seletorElemento
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.obterTexto("elemento");
    return:
    - String: método retorna o texto obtido do elemento, caso o mesmo seja encontrado.
- annotation:
    title: limparValorComBackspace
    text_description:
    - Método responsável por limpar um elemento que recebe entrada de dados mas
    - como se fosse um usuário usando a tecla backspace recebe um <code>**WebElement**</code> como parâmetro.
    parameters:
    - WebElement: elemento
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: WebElement elemento = comBasico.encontra("elemento");
    - java: comBasico.verificarSeRadioEstaMarcado(elemento);
    return:
    - void: método não tem retorno.
- annotation:
    title: limlimparCampopar
    text_description:
    - Método responsável por limpar um elemnto que recebe entrada de dados,
    - recebe um parâmetro do tipo <code>**String**</code>
    parameters:
    - String: seletorElemento
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.limpar("input-exemplo");
    return:
    - void: método não tem retorno.
- annotation:
    title: pegarValorCss
    text_description:
    - Método responsável por pegar o valor de uma propriedade
    - CSS de um determinado elemento, recebe 2 parâmetros do tipo <code>**String**</code>.
    parameters:
    - String: seletorElemento
    - String: elementoCss
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.pegarValorCss("elemento-exemplo", "color");
    return:
    - String: método retorna o valor do atrituto CSS buscado.
- annotation:
    title: obterValorDoElementoAttribute
    text_description:
    - Método responsável por pegar o valor de uma propriedade
    - de um determinado elemento, recebe 2 parâmetros do tipo <code>**String**</code>.
    parameters:
    - String: seletorElemento
    - String: attribute
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.obterValorDoElementoAttribute("elemento-exemplo", "value");
    return:
    - String: método retorna o valor do atrituto buscado.
- annotation:
    title: verificarSeOcheckBoxEstaMarcado
    text_description:
    - Método responsável por verificar se um checkbox está marcado
    - recebe um parâmetro do tipo <code>**String**</code>.
    parameters:
    - String: seletorElemento
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.verificarSeOcheckBoxEstaMarcado("elemento-exemplo");
    return:
    - boolean: método retorna **true** caso o elemento esteja marcado e **false** caso negativo.
- annotation:
    title: abrirUrl
    text_description:
    - Método responsável por abrir uma determinada url, recebe um parâmetro do tipo <code>**String**</code>.
    parameters:
    - String: url
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.abrirUrl("https://www.google.com.br");
    return:
    - void: método não tem retorno.
- annotation:
    title: navegarUrl
    text_description:
    - Método responsável por navegar até uma determinada url, recebe um parâmetro do tipo <code>**String**</code>.
    parameters:
    - String: url
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.navegarUrl("https://www.google.com.br");
    return:
    - void: método não tem retorno.
- annotation:
    title: validarTituloDoBrowser
    text_description:
    - Método responsável por validar o titulo browser, recebe um parâmetro do tipo <code>**String**</code>.
    parameters:
    - String: tituloPagina
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.validarTituloDoBrowser("Google");
    return:
    - void: método não tem retorno.
- annotation:
    title: validaTexto
    text_description:
    - Método responsável por validar o o texto de um determinado elemento, recebe um parâmetro do tipo <code>**String**</code>
    - e uma parâmetro do tipo <code>**WebElement**</code>.
    parameters:
    - WebElement: elemento
    - String: texto
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: WebElement elemento = comBasico.encontra("elemento-exemplo");
    - java: comBasico.validaTexto(elemento, "texto-exemplo");
    return:
    - void: método não tem retorno.
- annotation:
    title: validarUrlAtual
    text_description:
    - Método responsável por validar a url atual, recebe um parâmetro do tipo <code>**String**</code>.
    parameters:
    - String: url
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.validarUrlAtual("https://www.google.com.br");
    return:
    - void: método não tem retorno.
- annotation:
    title: selecionarComboPorTextoVisivel
    text_description:
    - Método responsável por selecionar uma opção com combobox através do texto visivel,
    - recebe 2 parâmetro do tipo <code>**String**</code>.
    parameters:
    - String: seletorElemento
    - String: valor
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.selecionarComboPorTextoVisivel("elemento-exemplo", "texto-exemplo");
    return:
    - void: método não tem retorno.
- annotation:
    title: obterTextoDaPrimeiraPosicaoDoCombo
    text_description:
    - Método responsável por retornar o texto de primeira opção de um combobox através do texto visivel,
    - recebe um parâmetro do tipo <code>**String**</code>.
    parameters:
    - String: seletorElemento
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.obterTextoDaPrimeiraPosicaoDoCombo("elemento-exemplo");
    return:
    - String: método retorna o texto da primeira opção de um combobox.
- annotation:
    title: obterQuantidadeOpcoesCombo
    text_description:
    - método reponsável por retornar a quantidade de opções de um combobox, recebe uma <code>**String**</code>
    - como parâmetro.
    parameters:
    - String: seletorElemento
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.obterQuantidadeOpcoesCombo("elemento-exemplo");
    return:
    - int: método retorna a quantidade de opções do combobox
- annotation:
    title: verificarSeExisteOpcaoNoSelect
    text_description:
    - método reponsável por verificar se existe uma opção no combobox, recebe 2 parâmetros do tipo <code>**String**</code>
    parameters:
    - String: seletorElemento
    - String: texto
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.verificarSeExisteOpcaoNoSelect("elemento-exemplo", "texto-exemplo");
    return:
    - void: método não tem retorno
- annotation:
    title: desmarcarComboPorTextoVisivel
    text_description:
    - método responsável por desmarcar um combobox através do texto que está visivel,
    - o mesmo recebe 2 parâmetros do tipo <code>**String**</code>
    parameters:
    - String: seletorElemento
    - String: valor
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.desmarcarComboPorTextoVisivel("elemento-exemplo", "texto-exemplo");
    return:
    - void: método não tem retorno.
- annotation:
    title: obterTextosCombo
    text_description:
    - método reponsável por retornar uma lista com o texto das opções presentes em um combobox,
    - recebe uma <code>**String**</code> como parâmetro.
    parameters:
    - String: seletorElemento
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.obterTextosCombo("elemento-exemplo");
    return:
    - List<String>: método uma lista do tipo <code>**String**</code> com o texto das opções do combobox
- annotation:
    title: envia
    text_description:
    - método responsável por dar um submit num formulário, recebe um parâmetro do tipo <code>**String**</code>.
    parameters:
    - String: seletorElemento
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.envia("elemento-exemplo");
    return:
    - void: método não tem retorno.
- annotation:
    title: obterTodasAsOpcoesSelecionadasNoCombo
    text_description:
    - método responsável por obter todas as opções selecionadas no combobox, recebe
    - um parâmetro do tipo <code>**String**</code>.
    parameters:
    - String: seletorElemento
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.obterTodasAsOpcoesSelecionadasNoCombo("elemento-exemplo");
    return:
    - List<String>: método retorna uma lista do tipo <code>**String**</code> com todas as opções selecionadas num combobox.
- annotation:
    title: entrarFrame
    text_description:
    - método Responsável por alterar o contexto da página para o contexto do iframe,
    - recebe uma parâmetro do tipo <code>**String**</code>
    parameters:
    - String: seletorElemento
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.entrarFrame("elemento-exemplo");
    return:
    - void: método não tem retorno.
- annotation:
    title: sairFrame
    text_description:
    - método Responsável por alterar o contexto do iframe para o contexto da página,
    - não recebe parâmetro.
    parameters:
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.sairFrame();
    return:
    - void: método não tem retorno.
- annotation:
    title: aceitarAlerta
    text_description:
    - método responsável por aceitar um window.alert, não recebe parâmetro.
    parameters:
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.aceitarAlerta();
    return:
    - void: método não tem retorno.
- annotation:
    title: obterTextoDoAlerta
    text_description:
    - método responsável por obter o texto de um window.alert, não recebe parâmetro.
    parameters:
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.obterTextoDoAlerta();
    return:
    - String: método retorna o texto do window.alert.
- annotation:
    title: negarAlerta
    text_description:
    - método responsável por negar um window.alert, não recebe parâmetro.
    parameters:
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.negarAlerta();
    return:
    - void: método não tem retorno.
- annotation:
    title: escreverNoAlerta
    text_description:
    - método responsável por inserir um determinado texto em um window.alert,
    - recebe um parâmetro do tipo <code>**String**</code>.
    parameters:
    - String: conteudo
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.escreverNoAlerta("texto-exemplo");
    return:
    - void: método não tem retorno.
- annotation:
    title: esperarElemento
    text_description:
    - método responsável por esperar de forma explicita até que um elemento passe a existir
    - recebe um parâmetro do tipo <code>**String**</code> e um parâmetro do tipo <code>**int**</code.
    parameters:
    - String: seletorElemento
    - int: tempo
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.esperarElemento("elemento-exemplo", 10);
    return:
    - void: método não tem retorno.
- annotation:
    title: esperarCarregar
    text_description:
    - método responsável por esperar de forma explicita até que um elemento seja carregado
    - recebe 2 parâmetros do tipo <code>**String**</code>.
    parameters:
    - String: seletorElemento
    - String: texto
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.esperarCarregar("elemento-exemplo", "texto-exemplo");
    return:
    - void: método não tem retorno.
- annotation:
    title: esperarSerInvisivel
    text_description:
    - método responsável por esperar de forma explicita até que um elemento esteja invisivel
    - recebe um parâmetros do tipo <code>**String**</code> e um parâmetro do tipo <code>int</code>.
    parameters:
    - String: seletorElemento
    - int: tempo
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.esperarSerInvisivel("elemento-exemplo", "texto-exemplo");
    return:
    - void: método não tem retorno.
- annotation:
    title: esperarElementoSerVisivel
    text_description:
    - método responsável por esperar de forma explicita até que um elemento esteja visivel
    - recebe um parâmetros do tipo <code>**String**</code> e um parâmetro do tipo <code>int</code>.
    parameters:
    - String: seletorElemento
    - int: tempo
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.esperarElementoSerVisivel("elemento-exemplo", "texto-exemplo");
    return:
    - void: método não tem retorno.
- annotation:
    title: navega
    text_description:
    - método responsável por navegar até uma determinada página,
    - recebe um parâmetro do tipo <code>**String**</code>
    parameters:
    - String: url
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.navega("https://www.google.com.br");
    return:
    - void: método não tem retorno.
- annotation:
    title: navega
    text_description:
    - método responsável por encerrar o navegador,
    - não recebe parâmetro.
    parameters:
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.encerra();
    return:
    - void: método não tem retorno.
- annotation:
    title: navega
    text_description:
    - método responsável por encerrar o navegador,
    - não recebe parâmetro.
    parameters:
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.encerra();
    return:
    - void: método não tem retorno.
- annotation:
    title: clicarPorTexto
    text_description:
    - método responsável por clicar em um elemento através do texto, tag e seletor de um elemento,
    - recebe 3 parâmetros do tipo <code>**String**</code>.
    parameters:
    - String: seletorElemento
    - String: tag
    - String: texto
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.clicarPorTexto("exemplo-teste", "h1", "texto-exemplo");
    return:
    - void: método não tem retorno.
- annotation:
    title: rolarParaBaixo
    text_description:
    - método responsável por mover o scroll para baixo até um determinado ponto da página,
    - recebe um parâmetro do tipo <code>**int**</code>
    parameters:
    - int: posicao
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.rolarParaBaixo(100);
    return:
    - void: método não tem retorno.
- annotation:
    title: rolarParaCima
    text_description:
    - método responsável por mover o scroll para cima até um determinado ponto da página,
    - recebe um parâmetro do tipo <code>**int**</code>
    parameters:
    - int: posicao
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.rolarParaCima(100);
    return:
    - void: método não tem retorno.
- annotation:
    title: moverParaOelemento
    text_description:
    - método responsável por mover o scroll da página até um determinado elemento na página usando javascript,
    - recebe um parâmetro do tipo <code>**By**</code>
    parameters:
    - By: seletorElemento
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.moverParaOelemento("exemplo-teste");
    return:
    - void: método não tem retorno.
- annotation:
    title: escrever
    text_description:
    - método responsável por escrever em um elemento que recebe entrada de dados usando javascript,
    - recebe 2 parâmetros um do tipo <code>**By**</code> e um do tipo <code>**String**</code>.
    parameters:
    - By: seletorElemento
    - String: texto
    ex:
    - java: BasicCommandWeb comBasico = new BasicCommandWeb(driver);
    - java: comBasico.escrever("exemplo-teste", "texto-exemplo");
    return:
    - void: método não tem retorno.
